// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=../../mocks/mock_adminServcie.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAdminServiceManager is a mock of AdminServiceManager interface.
type MockAdminServiceManager struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServiceManagerMockRecorder
	isgomock struct{}
}

// MockAdminServiceManagerMockRecorder is the mock recorder for MockAdminServiceManager.
type MockAdminServiceManagerMockRecorder struct {
	mock *MockAdminServiceManager
}

// NewMockAdminServiceManager creates a new mock instance.
func NewMockAdminServiceManager(ctrl *gomock.Controller) *MockAdminServiceManager {
	mock := &MockAdminServiceManager{ctrl: ctrl}
	mock.recorder = &MockAdminServiceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminServiceManager) EXPECT() *MockAdminServiceManagerMockRecorder {
	return m.recorder
}

// AddCoupon mocks base method.
func (m *MockAdminServiceManager) AddCoupon(code string, discount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCoupon", code, discount)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCoupon indicates an expected call of AddCoupon.
func (mr *MockAdminServiceManagerMockRecorder) AddCoupon(code, discount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCoupon", reflect.TypeOf((*MockAdminServiceManager)(nil).AddCoupon), code, discount)
}

// AddProduct mocks base method.
func (m *MockAdminServiceManager) AddProduct(name string, price float32, stock int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", name, price, stock)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockAdminServiceManagerMockRecorder) AddProduct(name, price, stock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockAdminServiceManager)(nil).AddProduct), name, price, stock)
}

// RemoveCoupon mocks base method.
func (m *MockAdminServiceManager) RemoveCoupon(code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCoupon", code)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCoupon indicates an expected call of RemoveCoupon.
func (mr *MockAdminServiceManagerMockRecorder) RemoveCoupon(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCoupon", reflect.TypeOf((*MockAdminServiceManager)(nil).RemoveCoupon), code)
}

// RemoveProduct mocks base method.
func (m *MockAdminServiceManager) RemoveProduct(code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProduct", code)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProduct indicates an expected call of RemoveProduct.
func (mr *MockAdminServiceManagerMockRecorder) RemoveProduct(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProduct", reflect.TypeOf((*MockAdminServiceManager)(nil).RemoveProduct), code)
}

// UpdateProduct mocks base method.
func (m *MockAdminServiceManager) UpdateProduct(id, name string, price float32, stock int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", id, name, price, stock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockAdminServiceManagerMockRecorder) UpdateProduct(id, name, price, stock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockAdminServiceManager)(nil).UpdateProduct), id, name, price, stock)
}
