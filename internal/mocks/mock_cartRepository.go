// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=../../mocks/mock_cartRepository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/meshyampratap01/OnlineShoppingCart/internal/dto"
	models "github.com/meshyampratap01/OnlineShoppingCart/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCartManager is a mock of CartManager interface.
type MockCartManager struct {
	ctrl     *gomock.Controller
	recorder *MockCartManagerMockRecorder
	isgomock struct{}
}

// MockCartManagerMockRecorder is the mock recorder for MockCartManager.
type MockCartManagerMockRecorder struct {
	mock *MockCartManager
}

// NewMockCartManager creates a new mock instance.
func NewMockCartManager(ctrl *gomock.Controller) *MockCartManager {
	mock := &MockCartManager{ctrl: ctrl}
	mock.recorder = &MockCartManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartManager) EXPECT() *MockCartManagerMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCartManager) AddToCart(userID string, product models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", userID, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCartManagerMockRecorder) AddToCart(userID, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartManager)(nil).AddToCart), userID, product)
}

// CreateCart mocks base method.
func (m *MockCartManager) CreateCart(cartID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", cartID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockCartManagerMockRecorder) CreateCart(cartID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockCartManager)(nil).CreateCart), cartID, userID)
}

// EmptyCart mocks base method.
func (m *MockCartManager) EmptyCart(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EmptyCart", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EmptyCart indicates an expected call of EmptyCart.
func (mr *MockCartManagerMockRecorder) EmptyCart(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmptyCart", reflect.TypeOf((*MockCartManager)(nil).EmptyCart), userID)
}

// GetCartIDByUserID mocks base method.
func (m *MockCartManager) GetCartIDByUserID(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartIDByUserID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartIDByUserID indicates an expected call of GetCartIDByUserID.
func (mr *MockCartManagerMockRecorder) GetCartIDByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartIDByUserID", reflect.TypeOf((*MockCartManager)(nil).GetCartIDByUserID), userID)
}

// GetCartItemQuantity mocks base method.
func (m *MockCartManager) GetCartItemQuantity(cartID, prodID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemQuantity", cartID, prodID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemQuantity indicates an expected call of GetCartItemQuantity.
func (mr *MockCartManagerMockRecorder) GetCartItemQuantity(cartID, prodID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemQuantity", reflect.TypeOf((*MockCartManager)(nil).GetCartItemQuantity), cartID, prodID)
}

// GetCartItems mocks base method.
func (m *MockCartManager) GetCartItems(cartID string) ([]dto.CartItemsDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItems", cartID)
	ret0, _ := ret[0].([]dto.CartItemsDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItems indicates an expected call of GetCartItems.
func (mr *MockCartManagerMockRecorder) GetCartItems(cartID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItems", reflect.TypeOf((*MockCartManager)(nil).GetCartItems), cartID)
}

// RemoveFromCart mocks base method.
func (m *MockCartManager) RemoveFromCart(cartID, prodID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCart", cartID, prodID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockCartManagerMockRecorder) RemoveFromCart(cartID, prodID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockCartManager)(nil).RemoveFromCart), cartID, prodID)
}
