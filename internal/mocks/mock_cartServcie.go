// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=../../mocks/mock_cartServcie.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/meshyampratap01/OnlineShoppingCart/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockCartServiceManager is a mock of CartServiceManager interface.
type MockCartServiceManager struct {
	ctrl     *gomock.Controller
	recorder *MockCartServiceManagerMockRecorder
	isgomock struct{}
}

// MockCartServiceManagerMockRecorder is the mock recorder for MockCartServiceManager.
type MockCartServiceManagerMockRecorder struct {
	mock *MockCartServiceManager
}

// NewMockCartServiceManager creates a new mock instance.
func NewMockCartServiceManager(ctrl *gomock.Controller) *MockCartServiceManager {
	mock := &MockCartServiceManager{ctrl: ctrl}
	mock.recorder = &MockCartServiceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartServiceManager) EXPECT() *MockCartServiceManagerMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCartServiceManager) AddToCart(userID, prodID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", userID, prodID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCartServiceManagerMockRecorder) AddToCart(userID, prodID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartServiceManager)(nil).AddToCart), userID, prodID)
}

// Checkout mocks base method.
func (m *MockCartServiceManager) Checkout(userID, couponCode string) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", userID, couponCode)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkout indicates an expected call of Checkout.
func (mr *MockCartServiceManagerMockRecorder) Checkout(userID, couponCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockCartServiceManager)(nil).Checkout), userID, couponCode)
}

// GetCartItems mocks base method.
func (m *MockCartServiceManager) GetCartItems(userID string) ([]dto.CartItemsDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItems", userID)
	ret0, _ := ret[0].([]dto.CartItemsDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItems indicates an expected call of GetCartItems.
func (mr *MockCartServiceManagerMockRecorder) GetCartItems(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItems", reflect.TypeOf((*MockCartServiceManager)(nil).GetCartItems), userID)
}

// RemoveFromCart mocks base method.
func (m *MockCartServiceManager) RemoveFromCart(userID, prodID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCart", userID, prodID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockCartServiceManagerMockRecorder) RemoveFromCart(userID, prodID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockCartServiceManager)(nil).RemoveFromCart), userID, prodID)
}
