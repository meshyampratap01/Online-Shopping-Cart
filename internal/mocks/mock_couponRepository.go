// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=../../mocks/mock_couponRepository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/meshyampratap01/OnlineShoppingCart/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockCouponManager is a mock of CouponManager interface.
type MockCouponManager struct {
	ctrl     *gomock.Controller
	recorder *MockCouponManagerMockRecorder
	isgomock struct{}
}

// MockCouponManagerMockRecorder is the mock recorder for MockCouponManager.
type MockCouponManagerMockRecorder struct {
	mock *MockCouponManager
}

// NewMockCouponManager creates a new mock instance.
func NewMockCouponManager(ctrl *gomock.Controller) *MockCouponManager {
	mock := &MockCouponManager{ctrl: ctrl}
	mock.recorder = &MockCouponManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouponManager) EXPECT() *MockCouponManagerMockRecorder {
	return m.recorder
}

// GetCouponByCode mocks base method.
func (m *MockCouponManager) GetCouponByCode(code string) (*models.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouponByCode", code)
	ret0, _ := ret[0].(*models.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouponByCode indicates an expected call of GetCouponByCode.
func (mr *MockCouponManagerMockRecorder) GetCouponByCode(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouponByCode", reflect.TypeOf((*MockCouponManager)(nil).GetCouponByCode), code)
}

// RemoveCoupon mocks base method.
func (m *MockCouponManager) RemoveCoupon(code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCoupon", code)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCoupon indicates an expected call of RemoveCoupon.
func (mr *MockCouponManagerMockRecorder) RemoveCoupon(code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCoupon", reflect.TypeOf((*MockCouponManager)(nil).RemoveCoupon), code)
}

// SaveCoupon mocks base method.
func (m *MockCouponManager) SaveCoupon(arg0 *models.Coupon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCoupon", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCoupon indicates an expected call of SaveCoupon.
func (mr *MockCouponManagerMockRecorder) SaveCoupon(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCoupon", reflect.TypeOf((*MockCouponManager)(nil).SaveCoupon), arg0)
}
