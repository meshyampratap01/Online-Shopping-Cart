// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=../../mocks/mock_productRepository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/meshyampratap01/OnlineShoppingCart/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockProductManager is a mock of ProductManager interface.
type MockProductManager struct {
	ctrl     *gomock.Controller
	recorder *MockProductManagerMockRecorder
	isgomock struct{}
}

// MockProductManagerMockRecorder is the mock recorder for MockProductManager.
type MockProductManagerMockRecorder struct {
	mock *MockProductManager
}

// NewMockProductManager creates a new mock instance.
func NewMockProductManager(ctrl *gomock.Controller) *MockProductManager {
	mock := &MockProductManager{ctrl: ctrl}
	mock.recorder = &MockProductManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductManager) EXPECT() *MockProductManagerMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductManager) AddProduct(arg0 models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductManagerMockRecorder) AddProduct(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductManager)(nil).AddProduct), arg0)
}

// GetAllProducts mocks base method.
func (m *MockProductManager) GetAllProducts() ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts")
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockProductManagerMockRecorder) GetAllProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockProductManager)(nil).GetAllProducts))
}

// GetProductByID mocks base method.
func (m *MockProductManager) GetProductByID(id string) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", id)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductManagerMockRecorder) GetProductByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductManager)(nil).GetProductByID), id)
}

// GetProductByName mocks base method.
func (m *MockProductManager) GetProductByName(name *string) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByName", name)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByName indicates an expected call of GetProductByName.
func (mr *MockProductManagerMockRecorder) GetProductByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByName", reflect.TypeOf((*MockProductManager)(nil).GetProductByName), name)
}

// RemoveProduct mocks base method.
func (m *MockProductManager) RemoveProduct(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveProduct", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveProduct indicates an expected call of RemoveProduct.
func (mr *MockProductManagerMockRecorder) RemoveProduct(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveProduct", reflect.TypeOf((*MockProductManager)(nil).RemoveProduct), id)
}

// UpdateProduct mocks base method.
func (m *MockProductManager) UpdateProduct(arg0 models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductManagerMockRecorder) UpdateProduct(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductManager)(nil).UpdateProduct), arg0)
}
