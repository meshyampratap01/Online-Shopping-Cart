// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=../../mocks/mock_productService.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/meshyampratap01/OnlineShoppingCart/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockProductServiceManager is a mock of ProductServiceManager interface.
type MockProductServiceManager struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceManagerMockRecorder
	isgomock struct{}
}

// MockProductServiceManagerMockRecorder is the mock recorder for MockProductServiceManager.
type MockProductServiceManagerMockRecorder struct {
	mock *MockProductServiceManager
}

// NewMockProductServiceManager creates a new mock instance.
func NewMockProductServiceManager(ctrl *gomock.Controller) *MockProductServiceManager {
	mock := &MockProductServiceManager{ctrl: ctrl}
	mock.recorder = &MockProductServiceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductServiceManager) EXPECT() *MockProductServiceManagerMockRecorder {
	return m.recorder
}

// GetAllProducts mocks base method.
func (m *MockProductServiceManager) GetAllProducts() ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProducts")
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProducts indicates an expected call of GetAllProducts.
func (mr *MockProductServiceManagerMockRecorder) GetAllProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProducts", reflect.TypeOf((*MockProductServiceManager)(nil).GetAllProducts))
}

// GetProductByID mocks base method.
func (m *MockProductServiceManager) GetProductByID(id string) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", id)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductServiceManagerMockRecorder) GetProductByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductServiceManager)(nil).GetProductByID), id)
}

// GetProductByName mocks base method.
func (m *MockProductServiceManager) GetProductByName(name *string) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByName", name)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByName indicates an expected call of GetProductByName.
func (mr *MockProductServiceManagerMockRecorder) GetProductByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByName", reflect.TypeOf((*MockProductServiceManager)(nil).GetProductByName), name)
}
